if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then exec startx; fi

LANG="en_US.UTF-8"
EDITOR=emacsclient
BROWSER=qutebrowser
DUNST_SIZE='250x20-30+30'
DUNST_FONT='OfficeCodePro-Bold 7'
PATH="$PATH:$(ruby -e 'print Gem.user_dir')/bin"
GEM_HOME=$HOME/.gem
MANWIDTH=80
LESS='-F -g -i -M -R -S -w -X -z-4'
CC=/usr/bin/clang
CXX=/usr/bin/clang++
XDG_CONFIG_HOME=$HOME/.config

# download folder is on ramdisk
test -d "$HOME/tmp/downloads" || mkdir "$HOME/tmp/downloads"

# Notes
NOTES_BASE_PATH=""
[ -d "$HOME/Documents/notes" ] && NOTES_BASE_PATH="$HOME/Documents/notes"
[ -d "$HOME/docs/notes" ]      && NOTES_BASE_PATH="$HOME/docs/notes"
if [ -n "NOTES_BASE_PATH" ]
then
  alias todo="(cd $NOTES_BASE_PATH; $EDITOR todo.txt)"
  alias lstodo="rg --no-line-number ' *(\[.\].*\*)$' $NOTES_BASE_PATH/notes/todo.txt --replace '\$1' | sort"
  
  # Daily journal
  function journal() {
    today=$(date +"%m-%d-%y")
    [ ! -f $file ] && echo "# $today" > $file
    (cd $NOTES_BASE_PATH; $EDITOR "journal/$today.txt")
  }
fi

## Utils
# Slightly rounded bars
export TERM_DECORATION_LEFT="퟼"
export TERM_DECORATION_RIGHT="퟽"
export TERM_DECORATION_SEPARATOR=""

# Generic Colorize Functions
RED="`tput setaf 1`"
GREEN="`tput setaf 2`"
YELLOW="`tput setaf 3`"
BLUE="`tput setaf 4`"
MAGENTA="`tput setaf 5`"
CYAN="`tput setaf 6`"
WHITE="`tput setaf 7`"
RESET="`tput sgr0`"

function colorize() {
    if [[ "$USE_COLORS" != "no" ]]; then
        c="$1"
        shift
        echo -n ${c}${@}${RESET};
    else
        shift
        echo -n "$@";
    fi
}

function green() { colorize "${GREEN}" "${@}"; }
function red() { colorize "${RED}" "${@}"; }
function yellow() { colorize "${YELLOW}" "${@}"; }
function blue() { colorize "${BLUE}" "${@}"; }
function magenta() { colorize "${MAGENTA}" "${@}"; }
function cyan() { colorize "${CYAN}" "${@}"; }
function white() { colorize "${WHITE}" "${@}"; }

# They check if a variable $OUT is set,
# printing to the path given by it, using stdout otherwise.
# Another Option is $COMPACT which removes comments from the output.

function print_out() {
    if [ -z "$OUT" ]; then
        echo "$@";
    else
        echo "$@" >> "$OUT"
    fi
}

function redirect_out() {
    local line=""
    while IFS='' read -r line; do
        print_out "$line";
    done
}

function sep() { 
    if [[ "$COMPACT" != "yes" ]]; then
        print_out -n "# ";  
        print_out "$(head -c 45 /dev/zero | tr '\0' '-')"; 
    fi
}
function comment() { 
    if [[ "$COMPACT" != "yes" ]]; then print_out "# $@"; fi; 
}

function nl() { 
    if [[ "$COMPACT" != "yes" ]]; then print_out ""; fi; 
}

# Generic Logging Functions

function error() {
    echo -n "$(red "(ERROR)") " 1>&2
    echo "$@" 1>&2
}

function fatal() {
    error "$@";
    exit 1;
}

function success() {
    echo "$(green "$@")"
}
